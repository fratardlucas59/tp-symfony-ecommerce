security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    encoders:
#        Symfony\Component\Security\Core\User\User:
        App\Entity\User:
            algorithm: auto

    providers:
        in_database:
            entity:
                class: App\Entity\User
                property: username
#        in_memory:
#            memory:
#                users:
#                    lucas: { password: '$argon2id$v=19$m=65536,t=4,p=1$dE1FVjJ5dkFpZmRqbzFWNQ$8d6QB6maEm8bO15PfqsZQKZ78yQDy6KLFaDuRoQ1ND4', roles: [ 'ROLE_ADMIN' ] }
#                    solidius: { password: '$argon2id$v=19$m=65536,t=4,p=1$MkU1VzFmUXMwcU0vRWJYbQ$u6fNJaDPwfKbUcquBlc1WwRnkC1i2sYeOHz2Tu76uXo', roles: [ 'ROLE_USER' ] }
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: lazy

            form_login:
                login_path: login
                check_path: login

            logout: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Pour faire un back office
        - { path: ^/admin/product, roles: ROLE_ADMIN}
        - { path: ^/profile, roles: ROLE_USER }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER]